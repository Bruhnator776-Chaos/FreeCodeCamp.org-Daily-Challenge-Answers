"""
Given a sentence, return a version of it that sounds like advice from a wise teacher using the following rules:
- Words are separated by a single space.
- Find the first occurrence of one of the following words in the sentence: "have", "must", "are", "will", "can".
- Move all words before and including that word to the end of the sentence and:
  - Preserve the order of the words when you move them.
  - Make them all lowercase.
  - And add a comma and space before them.
- Capitalize the first letter of the new first word of the sentence.
- All given sentences will end with a single punctuation mark. Keep the original punctuation of the sentence and move it to the end of the new sentence.
- Return the new sentence, make sure there's a single space between each word and no spaces at the beginning or end of the sentence.
"""

# CODE #
def wise_speak(sentence):

    punctuation = sentence[-1] # Collect the punctuation from the sentence
    sentence = sentence[:-1].split(" ") # Collect the words from the sentence

    # Collect the first instance of "have", "must", "are", "will", or "can"
    first = -1
    for word in sentence:
        if word.lower() in ["have", "must", "are", "will", "can"]:
            if first == -1: first = sentence.index(word)
            elif first > sentence.index(word): first = sentence.index(word)
    
    first_half, second_half = (sentence[first+1:], sentence[:first+1]) # Collect the first_half and second_half of the sentence
    first_half[0] = first_half[0].title() # Title the first letter of the first_half of the sentence
    
    return " ".join(first_half)+", "+(" ".join(second_half).lower())+punctuation # Return the full sentence
