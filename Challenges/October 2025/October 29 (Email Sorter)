"""
On October 29, 1971, the first email ever was sent, introducing the username@domain format we still use.
Now, there are billions of email addresses.

In this challenge, you are given a list of email addresses and need to sort them alphabetically by domain name first (the part after the @), and username second (the part before the @).

- Sorting should be case-insensitive.
- If more than one email has the same domain, sort them by their username.
- Return an array of the sorted addresses.
- Returned addresses should retain their original case.
"""

# CODE #
def sort(emails):
    domains = {} # Create a dictionary to hold each domain, and each email that falls under that domain in a case-insensitive format
    for domain in [email.lower().split('@')[1] for email in emails]: domains.update({domain:[]}) # For each lowercase domain in the emails, add it to the domains dict as a key
    for email in emails: domains.get(email.split('@')[1].lower()).append(email) # For each email in the emails, add it to the respective case-insensitive domain
    
    lower = lambda x: x.lower() # Create a simple function that replicates the .lower() method, for use in the sorted() functions key paramater
    sorted_emails = [] # Create an empty list to hold all the sorted emails to return
    for key in sorted(list(domains.keys())): # For each key in a sorted list of the domains dict keys...
        for email in sorted(domains.get(key), key=lower): sorted_emails.append(email) # For each email in the case-insensitively sorted emails of the current itterated key, add the email to the sorted_emails list
    
    return sorted_emails # Return the sorted emails
